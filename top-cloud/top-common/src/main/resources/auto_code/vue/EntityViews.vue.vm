<template>
    <div class="app-container">
        <el-form :inline="true" :model="listQuery" class="demo-form-inline">
            #foreach ($column in $beanColumns)
            <el-form-item label="$column.column_comment">
                <el-input v-model="listQuery.${column.beanName}" placeholder="$column.column_comment" clearable />
            </el-form-item>
            #end
            <el-button
                    type="text"
                    icon="el-icon-edit"
                    @click="handleEdit(scope)"
            >编辑</el-button>
            <el-button
                    type="text"
                    icon="el-icon-delete-solid"
                    @click="handleDelete(scope)"
            >删除</el-button>
        </el-form>

        <el-table
                v-loading="listLoading"
                :data="list"
                element-loading-text="Loading"
                border
                fit
                highlight-current-row
        >
            #foreach ($column in $beanColumns)
            <el-table-column label="$column.column_comment" align="center">
                <template slot-scope="scope">
                    {{ scope.row.${column.beanName} }}
                </template>
            </el-table-column>
            #end
            <el-table-column align="center" label="操作">
                <template slot-scope="scope">
                    <el-button type="primary" @click="handleEdit(scope)">编辑</el-button>
                    <el-button type="danger" @click="handleDelete(scope)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-dialog
                :visible.sync="dialogVisible"
                :title="dialogType === 'edit' ? '编辑' : '新增'"
        >
            <el-form :model="putInfo" label-width="auto" label-position="left">
                #foreach ($column in $beanColumns)
                    <el-form-item label="$column.column_comment">
                        <el-input v-model="putInfo.${column.beanName}" placeholder="$column.column_comment" clearable />
                    </el-form-item>
                #end
            </el-form>
            <div style="text-align: right">
                <el-button type="danger" @click="dialogVisible = false">取消</el-button>
                <el-button
                        type="primary"
                        :loading="btnLoading"
                        @click="confirm"
                >提交</el-button>
            </div>
        </el-dialog>
        <pagination
                v-show="total > 0"
                :total="total"
                :current.sync="listQuery.current"
                :size.sync="listQuery.size"
                @pagination="fetchData"
        />
    </div>
</template>

<script>
    import {
        get${tableInfo.javaTableName}List,
        save${tableInfo.javaTableName},
        update${tableInfo.javaTableName},
        delete${tableInfo.javaTableName}
    } from '@/api/${vueModel}/${tableInfo.vueTableName}'
    import Pagination from '@/components/Pagination'
    const default${tableInfo.javaTableName} = {
        #foreach ($column in $beanColumns)
        ${column.beanName}: '',
        #end
    }
    export default {
        components: { Pagination },
        data() {
            return {
                dialogVisible: false,
                dialogType: 'new',
                list: null,
                total: 0,
                listLoading: true,
                btnLoading: false,
                listQuery: {
                    current: 1,
                    size: 20
                },
                putInfo: Object.assign({}, default${tableInfo.javaTableName})
            }
        },
        created() {
            this.fetchData()
        },
        methods: {
            fetchData() {
                this.listLoading = true
                get${tableInfo.javaTableName}List(this.listQuery).then((response) => {
                    this.list = response.data.records
                    this.listLoading = false
                    this.total = response.data.total
                })
            },

            handleSave() {
                this.putInfo = Object.assign({}, default${tableInfo.javaTableName})
                this.dialogType = 'new'
                this.dialogVisible = true
            },
            handleEdit(scope) {
                this.dialogType = 'edit'
                this.dialogVisible = true
                for (const key in this.putInfo) {
                    this.putInfo[key] = scope.row[key]
                }
            },

            async confirm() {
                this.btnLoading = true
                const isEdit = this.dialogType === 'edit'

                if (isEdit) {
                    await update${tableInfo.javaTableName}(this.putInfo).then(() => {
                        this.fetchData()
                    })
                } else {
                    await save${tableInfo.javaTableName}(this.putInfo).then(() => {
                        this.fetchData()
                    })
                }
                this.dialogVisible = false
                this.$message({
                    type: 'success',
                    message: '操作成功!'
                })
                this.btnLoading = false
            },
            handleDelete({ row }) {
                this.$confirm('确定删除${tableInfo.tableComment}?', '删除', {
                    confirmButtonText: '删除',
                    cancelButtonText: '取消',
                    type: 'warning'
                })
                        .then(async() => {
                            var param = [row.id]
                            await delete${tableInfo.javaTableName}(param)
                            this.fetchData()
                            this.$message({
                                type: 'success',
                                message: '删除成功!'
                            })
                        })
                        .catch((err) => {
                            console.error(err)
                        })
            }
        }
    }
</script>
